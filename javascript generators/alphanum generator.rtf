{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww17400\viewh14480\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 let offset = 0\
\
\
		let str = '\\n\\ncharacterData anop\\n'\
    let i\
    \
    let charA =\
    [\
        -1, -1,\
        -1, .25,\
\
        -1, .25,\
        0, 1,\
\
        0, 1,\
        1, .25,\
\
        1, .25,\
        1, -1,\
\
        -1, -.25,\
        1, -.25\
    ]\
    \
\
  str += '; A\\n'\
  str += `		dc i2'$\{Math.floor(charA.length/2)\}'\\n\\n`\
  for ( i=0; i<charA.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charA[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charA[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetA = offset\
  offset += charA.length + 1\
    \
\
    let charB =\
    [\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        .66, 1,\
\
        .66, 1,\
        1, .66,\
\
        1, .66,\
        1, .33,\
\
        1, .33,\
        .5, 0,\
\
        .5, 0,\
        1, -.33,\
\
        1, -.33,\
        1, -.66,\
\
        1, -.66,\
        .66, -1,\
\
        .66, -1,\
        -1, -1,\
\
        .5, 0,\
        -1, 0\
\
    ]\
\
\
  str += '; B\\n'\
  str += `		dc i2'$\{Math.floor(charB.length/2)\}'\\n\\n`\
  for ( i=0; i<charB.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charB[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charB[i+1]*-10)\}'\\n\\n`\
  \}\
\
	let offsetB = offset\
  offset += charB.length + 1\
\
    let charC =\
    [\
        1, -1,\
        -1, -1,\
\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        1, 1\
    ]\
\
  str += '; C\\n'\
  str += `		dc i2'$\{Math.floor(charC.length/2)\}'\\n\\n`\
  for ( i=0; i<charC.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charC[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charC[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetC = offset\
  offset += charC.length + 1\
\
\
    let charD =\
    [\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        .33, 1,\
\
        .33, 1,\
        1, .33,\
\
        1, .33,\
        1, -.33,\
\
        1, -.33,\
        .33, -1,\
\
        .33, -1,\
        -1, -1\
    ]\
\
  str += '; D\\n'\
  str += `		dc i2'$\{Math.floor(charD.length/2)\}'\\n\\n`\
  for ( i=0; i<charD.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charD[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charD[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetD = offset\
  offset += charD.length + 1\
\
\
    let charE =\
    [\
        1, -1,\
        -1, -1,\
\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        1, 1,\
\
        -1, 0,\
        .5, 0\
    ]\
\
  str += '; E\\n'\
  str += `		dc i2'$\{Math.floor(charE.length/2)\}'\\n\\n`\
  for ( i=0; i<charE.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charE[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charE[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetE = offset\
  offset += charE.length + 1\
\
\
    let charF =\
    [\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        1, 1,\
\
        -1, 0,\
        .5, 0\
\
    ]\
\
  str += '; F\\n'\
  str += `		dc i2'$\{Math.floor(charF.length/2)\}'\\n\\n`\
  for ( i=0; i<charF.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charF[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charF[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetF = offset\
  offset += charF.length + 1\
\
\
    let charG =\
    [\
\
        0, -.25,\
        1, -.25,\
\
        1, -.25,\
        1, -1,\
\
        1, -1,\
        -1, -1,\
\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        1, 1,\
\
        1, 1,\
        1, .25\
\
    ]\
\
  str += '; G\\n'\
  str += `		dc i2'$\{Math.floor(charG.length/2)\}'\\n\\n`\
  for ( i=0; i<charG.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charG[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charG[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetG = offset\
  offset += charG.length + 1\
\
\
    let charH =\
    [\
        -1, 1,\
        -1, -1,\
\
        1, 1,\
        1, -1,\
\
        -1, 0,\
        1, 0\
\
    ]\
\
  str += '; H\\n'\
  str += `		dc i2'$\{Math.floor(charH.length/2)\}'\\n\\n`\
  for ( i=0; i<charH.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charH[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charH[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetH = offset\
  offset += charH.length + 1\
\
\
    let charI =\
    [\
        0, 1,\
        0, -1,\
\
        -.66, 1,\
        .66, 1,\
\
        -.66, -1,\
        .66, -1\
\
    ]\
\
  str += '; I\\n'\
  str += `		dc i2'$\{Math.floor(charI.length/2)\}'\\n\\n`\
  for ( i=0; i<charI.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charI[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charI[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetI = offset\
  offset += charI.length + 1\
\
\
    let charJ =\
    [\
        1, 1,\
        1, -1,\
\
        1, -1,\
        .25, -1,\
\
        .25, -1,\
        -.66, -.33\
\
    ]\
\
  str += '; J\\n'\
  str += `		dc i2'$\{Math.floor(charJ.length/2)\}'\\n\\n`\
  for ( i=0; i<charJ.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charJ[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charJ[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetJ = offset\
  offset += charJ.length + 1\
\
\
    let charK =\
    [\
        -1, 1,\
        -1, -1,\
\
        1, 1,\
        -1, 0,\
\
        -1, 0,\
        1, -1\
\
    ]\
\
  str += '; K\\n'\
  str += `		dc i2'$\{Math.floor(charK.length/2)\}'\\n\\n`\
  for ( i=0; i<charK.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charK[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charK[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetK = offset\
  offset += charK.length + 1\
\
\
    let charL =\
    [\
        -1, 1,\
        -1, -1,\
\
        -1, -1,\
        1, -1\
\
    ]\
\
  str += '; L\\n'\
  str += `		dc i2'$\{Math.floor(charL.length/2)\}'\\n\\n`\
  for ( i=0; i<charL.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charL[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charL[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetL = offset\
  offset += charL.length + 1\
\
    let charM =\
    [\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        0, 0,\
\
        0, 0,\
        1, 1,\
\
        1, 1,\
        1, -1\
    ]\
\
  str += '; M\\n'\
  str += `		dc i2'$\{Math.floor(charM.length/2)\}'\\n\\n`\
  for ( i=0; i<charM.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charM[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charM[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetM = offset\
  offset += charM.length + 1\
\
    let charN =\
    [\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        1, -1,\
\
        1, -1,\
        1, 1\
\
    ]\
\
  str += '; N\\n'\
  str += `		dc i2'$\{Math.floor(charN.length/2)\}'\\n\\n`\
  for ( i=0; i<charN.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charN[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charN[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetN = offset\
  offset += charN.length + 1\
\
    let charO =\
    [\
        1, -1,\
        -1, -1,\
\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        1, 1,\
\
        1, 1,\
        1, -1\
\
    ]\
    \
  str += '; O\\n'\
  str += `		dc i2'$\{Math.floor(charO.length/2)\}'\\n\\n`\
  for ( i=0; i<charO.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charO[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charO[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetO = offset\
  offset += charO.length + 1\
    \
\
    let charP =\
    [\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        1, 1,\
\
        1, 1,\
        1, 0,\
\
        1, 0,\
        -1, 0\
    ]\
    \
  str += '; P\\n'\
  str += `		dc i2'$\{Math.floor(charP.length/2)\}'\\n\\n`\
  for ( i=0; i<charP.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charP[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charP[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetP = offset\
  offset += charP.length + 1\
\
    let charQ =\
    [\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        1, 1,\
\
        1, 1,\
        1, -.33,\
\
        1, -.33,\
        0, -1,\
\
        0, -1,\
        -1, -1,\
\
        0, 0,\
        1, -1\
\
    ]\
\
  str += '; Q\\n'\
  str += `		dc i2'$\{Math.floor(charQ.length/2)\}'\\n\\n`\
  for ( i=0; i<charQ.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charQ[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charQ[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetQ = offset\
  offset += charQ.length + 1\
\
\
    let charR =\
    [\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        1, 1,\
\
        1, 1,\
        1, 0,\
\
        1, 0,\
        -1, 0,\
\
        -1, 0,\
        1, -1\
\
    ]\
\
  str += '; R\\n'\
  str += `		dc i2'$\{Math.floor(charR.length/2)\}'\\n\\n`\
  for ( i=0; i<charR.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charR[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charR[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetR = offset\
  offset += charR.length + 1\
\
    let charS =\
    [\
        1, 1,\
        -1, 1,\
\
        -1, 1,\
        -1, 0,\
\
        -1, 0,\
        1, 0,\
\
        1, 0,\
        1, -1,\
\
        1, -1,\
        -1, -1\
\
    ]\
\
  str += '; S\\n'\
  str += `		dc i2'$\{Math.floor(charS.length/2)\}'\\n\\n`\
  for ( i=0; i<charS.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charS[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charS[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetS = offset\
  offset += charS.length + 1\
\
\
    let charT =\
    [\
        0, 1,\
        0, -1,\
\
        -1, 1,\
        1, 1\
\
    ]\
    \
  str += '; T\\n'\
  str += `		dc i2'$\{Math.floor(charT.length/2)\}'\\n\\n`\
  for ( i=0; i<charT.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charT[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charT[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetT = offset\
  offset += charT.length + 1\
    \
\
    let charU =\
    [\
        -1, 1,\
        -1, -1,\
\
        -1, -1,\
        1, -1,\
\
        1, -1,\
        1, 1\
    ]\
\
  str += '; U\\n'\
  str += `		dc i2'$\{Math.floor(charU.length/2)\}'\\n\\n`\
  for ( i=0; i<charU.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charU[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charU[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetU = offset\
  offset += charU.length + 1\
\
    let charV =\
    [\
        -1, 1,\
        0, -1,\
\
        0, -1,\
        1, 1\
\
    ]\
\
  str += '; V\\n'\
  str += `		dc i2'$\{Math.floor(charV.length/2)\}'\\n\\n`\
  for ( i=0; i<charV.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charV[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charV[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetV = offset\
  offset += charV.length + 1\
\
    let charW =\
    [\
        -1,	 1,\
        -1,	-1,\
        -1,	-1,\
        0, -.2, \
        0,	-.2,\
        1,	-1,\
        1,	-1,\
        1,	1\
\
    ]\
\
  str += '; W\\n'\
  str += `		dc i2'$\{Math.floor(charW.length/2)\}'\\n\\n`\
  for ( i=0; i<charW.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charW[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charW[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetW = offset\
  offset += charW.length + 1\
\
    let charX =\
    [\
        -1, 1,\
        1, -1,\
\
        -1, -1,\
        1, 1\
\
    ]\
\
  str += '; X\\n'\
  str += `		dc i2'$\{Math.floor(charX.length/2)\}'\\n\\n`\
  for ( i=0; i<charX.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charX[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charX[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetX = offset\
  offset += charX.length + 1\
\
\
    let charY =\
    [\
        -1, 1,\
        0, 0,\
\
        0, 0,\
        1, 1,\
\
        0, 0,\
        0, -1\
\
    ]\
    \
  str += '; Y\\n'\
  str += `		dc i2'$\{Math.floor(charY.length/2)\}'\\n\\n`\
  for ( i=0; i<charY.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charY[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charY[i+1]*-10)\}'\\n\\n`\
  \} \
	let offsetY = offset\
  offset += charY.length + 1\
\
    let charZ =\
    [\
        -1, 1,\
        1, 1,\
\
        1, 1,\
        -1, -1,\
\
        -1, -1,\
        1, -1\
\
    ]\
\
  str += '; Z\\n'\
  str += `		dc i2'$\{Math.floor(charZ.length/2)\}'\\n\\n`\
  for ( i=0; i<charZ.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charZ[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charZ[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetZ = offset\
  offset += charZ.length + 1\
\
    let char0 =\
    [\
        1, -1,\
        -1, -1,\
\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        1, 1,\
\
        1, 1,\
        1, -1\
    ]\
\
  str += '; 0\\n'\
  str += `		dc i2'$\{Math.floor(char0.length/2)\}'\\n\\n`\
  for ( i=0; i<char0.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(char0[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(char0[i+1]*-10)\}'\\n\\n`\
  \}\
	let offset0 = offset\
  offset += char0.length + 1\
\
    let char1 =\
    [\
        0, 1,\
        0, -1\
    ]\
\
  str += '; 1\\n'\
  str += `		dc i2'$\{Math.floor(char1.length/2)\}'\\n\\n`\
  for ( i=0; i<char1.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(char1[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(char1[i+1]*-10)\}'\\n\\n`\
  \}\
	let offset1 = offset\
  offset += char1.length + 1\
\
    let char2 =\
    [\
        -1, 1,\
        1, 1,\
\
        1, 1,\
        1, 0,\
\
        1, 0,\
        -1, 0,\
\
        -1, 0,\
        -1, -1,\
\
        -1, -1,\
        1, -1\
    ]\
\
  str += '; 2\\n'\
  str += `		dc i2'$\{Math.floor(char2.length/2)\}'\\n\\n`\
  for ( i=0; i<char2.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(char2[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(char2[i+1]*-10)\}'\\n\\n`\
  \}\
	let offset2 = offset\
  offset += char2.length + 1\
\
    let char3 =\
    [\
        -1, -1,\
        1, -1,\
\
        1, -1,\
        1, 1,\
\
        1, 1,\
        -1, 1,\
\
        1, 0,\
        -.5, 0\
    ]\
\
  str += '; 3\\n'\
  str += `		dc i2'$\{Math.floor(char3.length/2)\}'\\n\\n`\
  for ( i=0; i<char3.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(char3[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(char3[i+1]*-10)\}'\\n\\n`\
  \}\
	let offset3 = offset\
  offset += char3.length + 1\
\
    let char4 =\
    [\
        -1, 1,\
        -1, 0,\
\
        -1, 0,\
        1, 0,\
\
        1, 1,\
        1, -1\
    ]\
\
  str += '; 4\\n'\
  str += `		dc i2'$\{Math.floor(char4.length/2)\}'\\n\\n`\
  for ( i=0; i<char4.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(char4[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(char4[i+1]*-10)\}'\\n\\n`\
  \}\
	let offset4 = offset\
  offset += char4.length + 1\
\
    let char5 =\
    [\
        1, 1,\
        -1, 1,\
\
        -1, 1,\
        -1, 0,\
\
        -1, 0,\
        1, 0,\
\
        1, 0,\
        1, -1,\
\
        1, -1,\
        -1, -1\
\
    ]\
\
  str += '; 5\\n'\
  str += `		dc i2'$\{Math.floor(char5.length/2)\}'\\n\\n`\
  for ( i=0; i<char5.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(char5[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(char5[i+1]*-10)\}'\\n\\n`\
  \}\
	let offset5 = offset\
  offset += char5.length + 1\
\
    let char6 =\
    [\
        1, 1,\
        -1, 1,\
\
        -1, 1,\
        -1, 0,\
\
        -1, 0,\
        1, 0,\
\
        1, 0,\
        1, -1,\
\
        1, -1,\
        -1, -1,\
\
        -1, -1,\
        -1, 0\
    ]\
\
  str += '; 6\\n'\
  str += `		dc i2'$\{Math.floor(char6.length/2)\}'\\n\\n`\
  for ( i=0; i<char6.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(char6[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(char6[i+1]*-10)\}'\\n\\n`\
  \}\
	let offset6 = offset\
  offset += char6.length + 1\
\
    let char7 =\
    [\
        -1, 1,\
        1, 1,\
\
        1, 1,\
        1, -1\
    ]\
\
  str += '; 7\\n'\
  str += `		dc i2'$\{Math.floor(char7.length/2)\}'\\n\\n`\
  for ( i=0; i<char7.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(char7[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(char7[i+1]*-10)\}'\\n\\n`\
  \}\
	let offset7 = offset\
  offset += char7.length + 1\
\
    let char8 =\
    [\
        1, -1,\
        -1, -1,\
\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        1, 1,\
\
        1, 1,\
        1, -1,\
\
        -1, 0,\
        1, 0\
    ]\
\
  str += '; 8\\n'\
  str += `		dc i2'$\{Math.floor(char8.length/2)\}'\\n\\n`\
  for ( i=0; i<char8.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(char8[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(char8[i+1]*-10)\}'\\n\\n`\
  \}\
	let offset8 = offset\
  offset += char8.length + 1\
\
    let char9 =\
    [\
        1, 0,\
        1, 1,\
\
        1, 1,\
        -1, 1,\
\
        -1, 1,\
        -1, 0,\
\
        -1, 0,\
        1, 0,\
\
        1, 0,\
        1, -1,\
\
        1, -1,\
        -1, -1\
\
    ]\
\
  str += '; 9\\n'\
  str += `		dc i2'$\{Math.floor(char9.length/2)\}'\\n\\n`\
  for ( i=0; i<char9.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(char9[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(char9[i+1]*-10)\}'\\n\\n`\
  \}\
	let offset9 = offset\
  offset += char9.length + 1\
\
    let charLT =\
    [\
        1, 1,\
        -1, 0,\
\
        -1, 0,\
        1, -1\
    ]\
\
  str += '; LT\\n'\
  str += `		dc i2'$\{Math.floor(charLT.length/2)\}'\\n\\n`\
  for ( i=0; i<charLT.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charLT[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charLT[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetLT = offset\
  offset += charLT.length + 1\
\
    let charGT =\
    [\
        -1, 1,\
        1, 0,\
\
        1, 0,\
        -1, -1\
    ]\
\
  str += '; GT\\n'\
  str += `		dc i2'$\{Math.floor(charGT.length/2)\}'\\n\\n`\
  for ( i=0; i<charGT.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charGT[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charGT[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetGT = offset\
  offset += charGT.length + 1\
\
    let charLBracket =\
    [\
        .66, 1,\
        0, 1,\
\
        0, 1,\
        0, -1,\
\
        0, -1,\
        .66, -1\
    ]\
\
  str += '; L bracket\\n'\
  str += `		dc i2'$\{Math.floor(charLBracket.length/2)\}'\\n\\n`\
  for ( i=0; i<charLBracket.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charLBracket[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charLBracket[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetLBracket = offset\
  offset += charLBracket.length + 1\
\
    let charRBracket =\
    [\
        -.66, 1,\
        0, 1,\
\
        0, 1,\
        0, -1,\
\
        0, -1,\
        -.66, -1\
    ]\
\
  str += '; R bracket\\n'\
  str += `		dc i2'$\{Math.floor(charRBracket.length/2)\}'\\n\\n`\
  for ( i=0; i<charRBracket.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charRBracket[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charRBracket[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetRBracket = offset\
  offset += charRBracket.length + 1\
\
    let charDegrees =\
    [\
        -2, 1,\
        -2.6, 1,\
\
        -2.6, 1,\
        -2.6, .4,\
\
        -2.6, .4,\
        -2, .4,\
\
        -2, .4,\
        -2, 1\
    ]\
\
  str += '; Degrees\\n'\
  str += `		dc i2'$\{Math.floor(charDegrees.length/2)\}'\\n\\n`\
  for ( i=0; i<charDegrees.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charDegrees[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charDegrees[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetDegrees = offset\
  offset += charDegrees.length + 1\
\
    let charAsterisk =\
    [\
        -1, 1,\
        1, -1,\
\
        -1, -1,\
        1, 1,\
\
        -1, 0,\
        1, 0\
    ]\
\
  str += '; Asterisk\\n'\
  str += `		dc i2'$\{Math.floor(charAsterisk.length/2)\}'\\n\\n`\
  for ( i=0; i<charAsterisk.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charAsterisk[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charAsterisk[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetAsterisk = offset\
  offset += charAsterisk.length + 1\
\
    let charPeriod =\
    [\
        0, -.6,\
        0, -1\
    ]\
\
  str += '; Period\\n'\
  str += `		dc i2'$\{Math.floor(charPeriod.length/2)\}'\\n\\n`\
  for ( i=0; i<charPeriod.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charPeriod[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charPeriod[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetPeriod = offset\
  offset += charPeriod.length + 1\
  \
    let charExclamation =\
    [\
        0, -.8,\
        0, -1,\
\
        0, 1,\
        0, -.4\
\
    ]\
\
  str += '; Exclamation\\n'\
  str += `		dc i2'$\{Math.floor(charExclamation.length/2)\}'\\n\\n`\
  for ( i=0; i<charExclamation.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charExclamation[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charExclamation[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetExclamation = offset\
  offset += charExclamation.length + 1\
\
    let charHyphen =\
    [\
        -.8, 0,\
        .8, 0\
    ]\
\
  str += '; Hyphen\\n'\
  str += `		dc i2'$\{Math.floor(charHyphen.length/2)\}'\\n\\n`\
  for ( i=0; i<charHyphen.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charHyphen[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charHyphen[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetHyphen = offset\
  offset += charHyphen.length + 1\
  \
    let charPlus =\
    [\
        -.8, 0,\
        .8, 0,\
\
        0, -.5,\
        0, .5\
\
    ]\
\
  str += '; Plus\\n'\
  str += `		dc i2'$\{Math.floor(charPlus.length/2)\}'\\n\\n`\
  for ( i=0; i<charPlus.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charPlus[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charPlus[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetPlus = offset\
  offset += charPlus.length + 1\
  \
    let charCopy =\
    [\
        1, -1,\
        -1, -1,\
\
        -1, -1,\
        -1, 1,\
\
        -1, 1,\
        1, 1,\
\
        1, 1,\
        1, -1,\
\
\
        .5, -.5,\
        -.5, -.5,\
\
        -.5, -.5,\
        -.5, .5,\
\
        -.5, .5,\
        .5, .5\
\
    ]\
\
  str += '; Copyright\\n'\
  str += `		dc i2'$\{Math.floor(charCopy.length/2)\}'\\n\\n`\
  for ( i=0; i<charCopy.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charCopy[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charCopy[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetCopy = offset\
  offset += charCopy.length + 1\
  \
    let charDoubleQuote =\
    [\
        .5, 1,\
        .5, 0,\
\
        -.5, 1,\
        -.5, 0\
\
    ]\
\
  str += '; Doublequote\\n'\
  str += `		dc i2'$\{Math.floor(charDoubleQuote.length/2)\}'\\n\\n`\
  for ( i=0; i<charDoubleQuote.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charDoubleQuote[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charDoubleQuote[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetDoubleQuote = offset\
  offset += charDoubleQuote.length + 1\
  \
    let charSingleQuote =\
    [\
        0, 1,\
        0, .2\
    ]\
\
  str += '; Quote\\n'\
  str += `		dc i2'$\{Math.floor(charSingleQuote.length/2)\}'\\n\\n`\
  for ( i=0; i<charSingleQuote.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charSingleQuote[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charSingleQuote[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetQuote = offset\
  offset += charSingleQuote.length + 1\
  \
    let charComma =\
    [\
        -.8, -1.8,\
        0, -.5\
    ]\
\
  str += '; Comma\\n'\
  str += `		dc i2'$\{Math.floor(charComma.length/2)\}'\\n\\n`\
  for ( i=0; i<charComma.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charComma[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charComma[i+1]*-10)\}'\\n\\n`\
  \}\
	let offsetComma = offset\
  offset += charComma.length + 1\
  \
    let charUnderscore =\
    [\
        -1, -1,\
        1, -1\
    ]\
   \
  str += '; Underscore\\n'\
  str += `		dc i2'$\{Math.floor(charUnderscore.length/2)\}'\\n\\n`\
  for ( i=0; i<charUnderscore.length; i+=2) \{\
    str += `		dc i2'$\{Math.floor(charUnderscore[i]*7)\}'\\n`\
    str += `		dc i2'$\{Math.floor(charUnderscore[i+1]*-10)\}'\\n\\n`\
  \} \
	let offsetUnderscore = offset\
  offset += charUnderscore.length + 1\
\
\
str += '\\n\\n'\
\
str += 'OFFSET_A gequ $' + offsetA.toString(16) + '\\n'\
str += 'OFFSET_B gequ $' + offsetB.toString(16) + '\\n'\
str += 'OFFSET_C gequ $' + offsetC.toString(16) + '\\n'\
str += 'OFFSET_D gequ $' + offsetD.toString(16) + '\\n'\
str += 'OFFSET_E gequ $' + offsetE.toString(16) + '\\n'\
str += 'OFFSET_F gequ $' + offsetF.toString(16) + '\\n'\
str += 'OFFSET_G gequ $' + offsetG.toString(16) + '\\n'\
str += 'OFFSET_H gequ $' + offsetH.toString(16) + '\\n'\
str += 'OFFSET_I gequ $' + offsetI.toString(16) + '\\n'\
str += 'OFFSET_J gequ $' + offsetJ.toString(16) + '\\n'\
str += 'OFFSET_K gequ $' + offsetK.toString(16) + '\\n'\
str += 'OFFSET_L gequ $' + offsetL.toString(16) + '\\n'\
str += 'OFFSET_M gequ $' + offsetM.toString(16) + '\\n'\
str += 'OFFSET_N gequ $' + offsetN.toString(16) + '\\n'\
str += 'OFFSET_O gequ $' + offsetO.toString(16) + '\\n'\
str += 'OFFSET_P gequ $' + offsetP.toString(16) + '\\n'\
str += 'OFFSET_Q gequ $' + offsetQ.toString(16) + '\\n'\
str += 'OFFSET_R gequ $' + offsetR.toString(16) + '\\n'\
str += 'OFFSET_S gequ $' + offsetS.toString(16) + '\\n'\
str += 'OFFSET_T gequ $' + offsetT.toString(16) + '\\n'\
str += 'OFFSET_U gequ $' + offsetU.toString(16) + '\\n'\
str += 'OFFSET_V gequ $' + offsetV.toString(16) + '\\n'\
str += 'OFFSET_W gequ $' + offsetW.toString(16) + '\\n'\
str += 'OFFSET_X gequ $' + offsetX.toString(16) + '\\n'\
str += 'OFFSET_Y gequ $' + offsetY.toString(16) + '\\n'\
str += 'OFFSET_Z gequ $' + offsetZ.toString(16) + '\\n'\
\
str += 'OFFSET_0 gequ $' + offset0.toString(16) + '\\n'\
str += 'OFFSET_1 gequ $' + offset1.toString(16) + '\\n'\
str += 'OFFSET_2 gequ $' + offset2.toString(16) + '\\n'\
str += 'OFFSET_3 gequ $' + offset3.toString(16) + '\\n'\
str += 'OFFSET_4 gequ $' + offset4.toString(16) + '\\n'\
str += 'OFFSET_5 gequ $' + offset5.toString(16) + '\\n'\
str += 'OFFSET_6 gequ $' + offset6.toString(16) + '\\n'\
str += 'OFFSET_7 gequ $' + offset7.toString(16) + '\\n'\
str += 'OFFSET_8 gequ $' + offset8.toString(16) + '\\n'\
str += 'OFFSET_9 gequ $' + offset9.toString(16) + '\\n'\
\
\
str += 'OFFSET_LT gequ $' + offsetLT.toString(16) + '\\n'\
str += 'OFFSET_GT gequ $' + offsetGT.toString(16) + '\\n'\
str += 'OFFSET_LBRACKET gequ $' + offsetLBracket.toString(16) + '\\n'\
str += 'OFFSET_RBRACKET gequ $' + offsetRBracket.toString(16) + '\\n'\
str += 'OFFSET_DEGREES gequ $' + offsetDegrees.toString(16) + '\\n'\
str += 'OFFSET_ASTERISK gequ $' + offsetAsterisk.toString(16) + '\\n'\
str += 'OFFSET_PERIOD gequ $' + offsetPeriod.toString(16) + '\\n'\
str += 'OFFSET_EXCLAMATION gequ $' + offsetExclamation.toString(16) + '\\n'\
str += 'OFFSET_HYPHEN gequ $' + offsetHyphen.toString(16) + '\\n'\
str += 'OFFSET_PLUS gequ $' + offsetPlus.toString(16) + '\\n'\
str += 'OFFSET_COPY gequ $' + offsetCopy.toString(16) + '\\n'\
str += 'OFFSET_DOUBLEQUOTE gequ $' + offsetDoubleQuote.toString(16) + '\\n'\
str += 'OFFSET_QUOTE gequ $' + offsetQuote.toString(16) + '\\n'\
str += 'OFFSET_COMMA gequ $' + offsetComma.toString(16) + '\\n'\
str += 'OFFSET_UNDERSCORE gequ $' + offsetUnderscore.toString(16) + '\\n'\
\
\
str += '\\n\\n'\
\
console.log(str)\
\
    \
    \
    }